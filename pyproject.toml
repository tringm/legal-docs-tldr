[tool.poetry]
name = "src"
version = "0.0.1"
description = "A short description of the project"
authors = [
    "Tri Nguyen <tringuyenminh23@gmail.com>",
]
license = "Apache-2.0"
readme = "README.md"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "src" }
]

[tool.poetry.dependencies]
python = ">=3.10.1, <4.0"

aiohttp = "^3.9.2"
aiolimiter = "^1.1.0"
backoff = "^2.2.1"
beautifulsoup4 = "^4.12.2"
click = "^8.1.7"
loguru = "^0.7.2"
lxml = "^4.9.3"
ndjson = "^0.3.1"
pydantic = "^2.4.2"
requests = "^2.31.0"

[tool.poetry.dev-dependencies]
black = "*"
mypy = "*"
pre-commit = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
ruff = "*"

[tool.poetry.group.dev.dependencies]
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.12.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py310", "py311"]
include = '\.pyi?$'
line-length = 120

[tool.pytest.ini_options]
addopts = """\
    --cov src \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%dT%H:%M:%S.%f"

[tool.coverage.report]
fail_under = 80
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
plugins = [
    "pydantic.mypy"
]

disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
# Based on AWS SAM <https://github.com/aws/serverless-application-model>
line-length = 120

select = [
    "E",  # pycodestyle
    "W",  # pycodestyle
    "F",  # Pyflakes
    "PL", # pylint
    "I", # isort
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "S", # flake8-bandit
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
    "YTT", # flake8-2020
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "T20", # flake8-print"
]
ignore = [
    "S101", # Allow the use of assert
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "db/migrations/versions/*",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Mininal python version we support is 3.8
target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403"]
